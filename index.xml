<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Debugger Workbook: A Tutorial on using the VS Code Debugger</title>
    <link>/</link>
    <description>Recent content in Introduction on Debugger Workbook: A Tutorial on using the VS Code Debugger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Jan 2022 10:10:05 -0600</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Preliminiaries</title>
      <link>/docs/1/</link>
      <pubDate>Wed, 12 Jan 2022 09:55:47 -0600</pubDate>
      
      <guid>/docs/1/</guid>
      <description>Before we get started with even setting up the VS Code debugger, I would like to go over a few things. Most of you likely already know about the things below if you have been able to open this workbook with VS Code Live Server, so this should be a quick skim for many. But if you haven&amp;rsquo;t been using it, you will have to in order to continue this workbook.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/docs/2/</link>
      <pubDate>Wed, 12 Jan 2022 09:56:24 -0600</pubDate>
      
      <guid>/docs/2/</guid>
      <description>This section will cover how to set up the debugger for this workbook as well as future workbooks and other projects you may want to debug in the future.
I also recommend only having a single folder in your workspace being this one, this may make the process below easier.
Setting up For this setup, we&amp;rsquo;re going to be using Chrome but this also works with many other browsers.
First, install the debugger for Chrome.</description>
    </item>
    
    <item>
      <title>Stepping</title>
      <link>/docs/3/</link>
      <pubDate>Wed, 12 Jan 2022 10:47:34 -0600</pubDate>
      
      <guid>/docs/3/</guid>
      <description>From the last page we saw how to continue to the next breakpoint, but there are some other things we can do to progress through our code in the debugger bar.
 From the bar you can do the following things:
 Continue/Pause: Continues to the next breakpoint or end of program. Pauses the program if it is continuously running in say an animation loop. Step Over: Goes to the immediate next line of code.</description>
    </item>
    
    <item>
      <title>Conditional Statements</title>
      <link>/docs/4/</link>
      <pubDate>Wed, 12 Jan 2022 10:47:34 -0600</pubDate>
      
      <guid>/docs/4/</guid>
      <description>Conditional Statements With breakpoints, you can also set them to stop your program on certain conditions.
If you right click on a breakpoint you&amp;rsquo;ve made, you can edit the breakpoint as well as remove it or enable/disable it.
 When you are editing a breakpoint, you can set it to &amp;lsquo;Expression&amp;rsquo; which will make the breakpoint only stop the program if the condition you set is met at the breakpoint. Make sure you hit Enter after setting your expression to save the breakpoint conditional.</description>
    </item>
    
    <item>
      <title>Tracking Values</title>
      <link>/docs/5/</link>
      <pubDate>Wed, 12 Jan 2022 10:47:34 -0600</pubDate>
      
      <guid>/docs/5/</guid>
      <description>The main use of console.log is to check on certain values or write messages that indicate if the code has gone through a certain point. We can do that much more easily using the Log Message option when editing a breakpoint to create a logpoint.
To create a logpoint, start by creating a breakpoint as you usually would. Then right click the breakpoint and click &amp;lsquo;Edit Breakpoint&amp;rsquo; just like how you did for creating Expressions.</description>
    </item>
    
  </channel>
</rss>
